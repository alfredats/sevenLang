#+TITLE: Prolog

Note: I am using the swi flavor of prolog. YMMV.

* Notes from each day:
** Day 1: An excellent driver
*** Notes
*Intro*
- Prolog is a rules-based language for expressing logic and asking questions
- Prolog expressions are made up of logical rules & relationships, and also queries
- Prolog is about describing the world through the logical rules & relationships, then presenting logical problems with queries that the computer can then try to solve.
- This means we don't actually have to write the logic!


*syntax*
- beginning a word with a lowercased char tells prolog that it is an atomic fact, or an atom for short 
- beginning a word with a uppercased char or underscore -> variable

- Here's an example of a prolog file  
 #+begin_src prolog :tangle friends.pl
   likes(wallace,cheese). % these are facts. This line particularly reads like "wallace likes cheese".
   likes(grommit,cheese).
   likes(wendolene,sheep).

   friend(X,Y) :- \+(X = Y),likes(X,Z),likes(Y,Z). % these are rules
   % specifically, this rule is known as friend/2 (the friend rule with 2 parameters)
   % it consists of 3 subgoals (X & Y cannot be the same, X must like Z, Y must like Z)
   % all three must be true for this rule to be true
#+end_src

- within rules, =:-= denotes a subgoal, =\+= does logical negation
- Within the prolog repl, =['friends'].= loads the above file. It returns =true.= when successful


*queries*
- consider the following knowledge base
  #+begin_src prolog :tangle food.pl
    food_type(velveeta, cheese). % "velveeta is a food_type of cheese"
    food_type(ritz, cracker).
    food_type(spam, meat).
    food_type(sausage, meat).
    food_type(jolt, soda).
    food_type(twinkle, dessert).

    flavor(sweet, dessert).
    flavor(savory, meat).
    flavor(savory, cheese).
    flavor(sweet, soda).

    food_flavor(X, Y) :- food_type(X,Z), flavor(Y,Z).

  #+end_src

- load the =food.pl= file and execute a query =food_type(What, meat).=, prolog returns a single answer.
- use =;= to ask prolog to find another.


*Binding & Unification*
- === is not variable assignment, but is a unification operation (think of it like how C handles variable references)
- unification operator === is infix, and tries to make the structures involved identical

  #+begin_src prolog :tangle ohmy.pl
    cat(lion).
    cat(tiger).

    dorothy(X,Y,Z) :- X=lion, Y=tiger, Z=bear.
    twin_cats(X,Y) :- cat(X), cat(Y).

  #+end_src

- loading the database and running the query =dorothy(One,Two,Three).= returns
  #+begin_src prolog
    ?- dorothy(One,Two,Three).
    One = lion,
    Two = tiger,
    Three = bear.

  #+end_src

  In this case, prolog unifies =X,Y,Z= to =lion, tiger, bear= within the goals of =dorothy=. Afterwhich, it unifies =X,Y,Z= to =One, Two, Three=.

  - if we ran =twin_cats(One,Two).= instead, we get
    #+begin_src prolog
      ?- twin_cats(One,Two).
      One = Two, Two = lion ;
      One = lion,
      Two = tiger ;
      One = tiger,
      Two = lion ;
      One = Two, Two = tiger.
    #+end_src

    Prolog works through all possible combinations of X & Y based on the facts and information available within the goals.

*** Self-Study
*Find*
1) https://www.cpp.edu/~jrfisher/www/prolog_tutorial/contents.html
   http://www.lix.polytechnique.fr/~liberti/public/computing/prog/prolog/prolog-tutorial.html
2) https://swi-prolog.discourse.group/
3) SWI Prolog: https://www.swi-prolog.org/pldoc/man?section=quickstart

*Do*
1)
     #+begin_src prolog :tangle books.pl
       author(norwegianWood,murakami).
       author(oneQ84, murakami).
       author(colorlessTsukuru, murakami).
       author(neverLetMeGo, ishiguro).
       author(devotionOfSuspectX, higashino).
       author(doAndroidsDreamOfElectricSheep, philipKdick).

       books(Y,L) :- findall(X, author(X,Y), L).
     #+end_src

2) running =books(murakami, L)= yields =L = [norwegianWood, oneQ84, colorlessTsukuru].=

3)
   #+begin_src prolog :tangle music.pl
     instrument(hendrix, guitar).
     instrument(eddieVanHalen, guitar).
     instrument(axelRose, guitar).
     instrument(dukeEllington, piano).
     instrument(theloniousMonk, piano).
     instrument(louisArmstrong, trumpet).

     genre(hendrix,rock).
     genre(eddieVanHalen, rock).
     genre(axelRose, rock).
     genre(dukeEllington, jazz).
     genre(theloniousMonk, jazz).
     genre(louisArmstrong, jazz).


     instrumentalists(Y,L) :- findall(X, instrument(X,Y), L).
   #+end_src

** Day 2: Fifteen Minutes to Wapner
*** Notes
- A rule can have multiple clauses; only one of them needs to be true for the rule to be true
- Take the following:
  #+begin_src prolog :tangle family.pl
    father(david, job).
    father(job, michael).

    % a rule can have multiple clauses
    ancestor(X,Y) :-
        father(X,Y).
    ancestor(X,Y) :-
        father(X,Z),
        ancestor(Z,Y).
  #+end_src

  The =ancestor/2= rule here reads as follows:

        X is an ancestor of Y if
            either
                X is the father of Y
            or
                X is the father of Z and Z is the ancestor of Y

- Predicates can also be queried in reverse
- Recursive rules can sometimes cause stack overflow. When it does, try tail recursive optimization.

*Lists & Tuples*
- Lists and tuples are denoted [a,b,c] and (1,2,3) respectively
- Their strengths come out with unification operations within prolog


- Tuples unify element-wise strictly
- A tuple unification with variables on both sides is possible
  #+begin_src prolog
    ?- (A,2,C)=(1,B,3).

    A = 1,
    B = 2,
    C = 3.

  #+end_src


- List unification has one added feature, =|=
  #+begin_src prolog
    ?- [1,2,3]=[A|B].
    A = 1,
    B = [2,3].

    ?- [1]=[A|B].
    A = 1,
    B = [].

    ?- []=[A|B].
    false.

    ?- [a, b, c, d, e] = [_, _|[H|_]].
    H = c.
  #+end_src

- recursive math w/ lists can be done as follows:
  #+begin_src prolog :tangle math.pl
    count(0,[]). % the base case; an empty list has count 0
    count(Count,[_|T]) :- count(TCount, T), Count is TCount + 1. % note the "is" operator

    sum(0,[]).
    sum(Total,[H|T]) :- sum(Sum,T), Total is H + Sum.

    % I'm guessing prolog handles the type checking for average?
    average(Avg, List) :- sum(Sum,List), count(Count,List), Avg is Sum/Count.

  #+end_src

- =append\3= can be quite useful
  #+begin_src prolog
    ?- append([oil], [water], [oil, water]).
    true.


    ?- append([oil], [water], [oil, slick]).
    false.


    ?- append([tiny], [bubbles], What).
    What = [tiny,bubbles].


    ?- append([dessert_topping], Who, [dessert_topping, floor_wax]).
    Who = [floor_wax].


    ?- append(One, Two, [apples, oranges, bananas]).â€‹
    One = [],
    Two = [apples,oranges,bananas] ;
    One = [apples],
    Two = [oranges,bananas] ;
    One = [apples,oranges],
    Two = [bananas] ;
    One = [apples,oranges,bananas],
    Two = [] ;
    false.
  #+end_src

we can write our own version of =append/3= as follows:
#+begin_src prolog :tangle concatenate.pl
  % this is our base case; appending an empty list to anything returns itself.
  concatenate([],List,List).

  concatenate([H|[]], List, [H|List]) % concatenating a single-element list to another list.
  concatenate([H1|[H2|[]]],List, [H1,H2|List]).
  concatenate([H1|[H2|[H3|[]]]],List, [H1,H2,H3|List])

  % ... so on and so forth...


  % we can generalize the inductive rules as follows:
  concatenate([H|T1],List,[H|T2]) :- concatenate(T1,List,T2).
  % recall that Y :- X is read as: if X then Y (X implies Y)
  % the above statement then reads as
  %       if the concatenation of the first list's tail & the second list is the third lists tail,
  %           and the heads of the first and third lists are the same,
  %               then the concatenation of the first list and the second list is the third.
  %
  % concretely,
  %   this means that the tail of the first list is traversed until we reach an empty list,
  %       then the base case is proven true, after which the recursed implications are inductively true as well.

#+end_src

*** Self-study
*Find*
1) I didn't wanna find them, so I just tried writing them myself.
   #+begin_src prolog :tangle fibonacci.pl
     % base cases
     fibonacci(0,0).
     fibonacci(1,1).

     % general recursive case.
     fibonacci(N,X) :-
         N > 1,
         succ(N1,N),
         succ(N2,N1),
         fibonacci(N1,S1),
         fibonacci(N2,S2),
         X is S1+S2.
   #+end_src

    Halfway through writing this I got stuck because I was using =fibonacci(N-1,S1)= and =fibonacci(N-2,S2)=. Prolog doesn't allow mathematical operations like =2-1= in general, so I had to consult http://cubbi.com/fibonacci/prolog.html

    pretty cool stuff on the website.

2)

3) https://www.cpp.edu/~jrfisher/www/prolog_tutorial/2_3.html

   This is a pretty cool implementation which has an in-depth explanation!

4) see:
   https://www.cpp.edu/~jrfisher/www/prolog_tutorial/2_5.html
   https://stackoverflow.com/questions/14079805/how-does-negation-as-failure-works-in-prolog
   https://stackoverflow.com/questions/8523608/what-is-the-logical-not-in-prolog

   prolog's =not= or =\+= operator is implemented as =negation as failure=, meaning that a predicate fails because not enough information is known about it. This can have undesired consequences when what we want to actually implement is logical negation. To do that, we have to use =\== or =dif/2= instead.



*Do*
1) Reverse the elements of a list
   #+begin_src prolog :tangle listReverse.pl
myReverse([],[]).
myReverse([H|T],List) :-
    myReverse(T,Hprime),
    append(Hprime,[H],List).
   #+end_src

2) Find the smallest element of a list
   #+begin_src prolog :tangle smallest.pl
     smallest([Min],Min).
     smallest([H1,H2|T],Min) :-
         H3 is min(H1,H2),
         smallest([H3|T],Min).
   #+end_src

3) Sort the elements of a list (I guess it's time to bubblesort?)
   #+begin_src prolog :tangle bubble.pl
     bubblesort([H1,H2|T],Sorted) :-
         do_bsort([H2|T],[H1], Sorted).

     do_bsort([],SL,SL).
     do_bsort(SL,[],SL). % Special case. Middle is almost always never empty, except for one condition.
     do_bsort([H|T],[H2|T2],SL) :-
         H =< H2,
         do_bsort(T,[H,H2|T2],SL).
     do_bsort([H|T],[H2|T2],SL) :-
         H > H2,
         do_bsort([H],T2,TN), % This is the condition that requires the special predicate.
         do_bsort(T,[H2|TN],SL).
   #+end_src

   The implementations people have online are so succint, I wonder how they do it.

** Day 3: Blowing up Vegas
*** Notes
This day was all about examples of programs and how they are implemented. Nice as a reference, but no specifically insightful notes.
Something to note however, was that the =fd_all_distinct= and =fd_domain= predicates are not available within SWI-prolog. There however is an alternative within the CLP(FD) library (https://eu.swi-prolog.org/pldoc/man?section=clpfd-predicate-index). See =sudoku.pl= for details.

*** Do
*Find*
1) Prolog I/O: https://www.cpp.edu/~jrfisher/www/prolog_tutorial/2_10.html

2) Honestly I'm not sure what he's asking for here.


*Do*
1) & 2)
   #+begin_src prolog :tangle sudoku4.pl
:- use_module(library(clpfd)).
:- debug.

valid([]).
valid([H|T]) :-
    all_distinct(H),
    valid(T).

sudoku(Puzzle, Solution) :-
    Solution = Puzzle,
    Puzzle = [S11, S12, S13, S14,
              S21, S22, S23, S24,
              S31, S32, S33, S34,
              S41, S42, S43, S44],

    Solution ins 1..4,

    Row1 = [S11, S12, S13, S14],
    Row2 = [S21, S22, S23, S24],
    Row3 = [S31, S32, S33, S34],
    Row4 = [S41, S42, S43, S44],

    Col1 = [S11, S21, S31, S41],
    Col2 = [S12, S22, S32, S42],
    Col3 = [S13, S23, S33, S43],
    Col4 = [S14, S24, S34, S44],

    Sq1  = [S11, S12, S21, S22],
    Sq2  = [S13, S14, S23, S24],
    Sq3  = [S31, S32, S41, S42],
    Sq4  = [S33, S34, S43, S44],

    valid([Row1, Row2, Row3, Row4,
           Col1, Col2, Col3, Col4,
           Sq1,  Sq2,  Sq3,  Sq4  ]).


print4([A,B,C,D]) :-
   write('|'), write(A), write(' '), write(B), write(' '), write(C), write(' '), write(D), write('|').

printSudoku([]) :-
    nl.
printSudoku([H, I, J, K|T]) :-
    print4([H,I,J,K]),
    nl,
    printSudoku(T).

sudokuTest(X) :-
    sudoku([_, _, 2, 3,
            _, _, _, _,
            _, _, _, _,
            3, 4, _, _],X),
    printSudoku(X).

   #+end_src

   #+begin_src prolog :tangle sudoku9.pl
:- use_module(library(clpfd)).

valid([]).
valid([H|T]) :-
    all_distinct(H),
    valid(T).

sudoku(Puzzle, Solution) :-
    Solution = Puzzle,
    Puzzle = [A1, A2, A3, A4, A5, A6, A7, A8, A9,
              B1, B2, B3, B4, B5, B6, B7, B8, B9,
              C1, C2, C3, C4, C5, C6, C7, C8, C9,
              D1, D2, D3, D4, D5, D6, D7, D8, D9,
              E1, E2, E3, E4, E5, E6, E7, E8, E9,
              F1, F2, F3, F4, F5, F6, F7, F8, F9,
              G1, G2, G3, G4, G5, G6, G7, G8, G9,
              H1, H2, H3, H4, H5, H6, H7, H8, H9,
              I1, I2, I3, I4, I5, I6, I7, I8, I9],

    Solution ins 1..9,

    Row1 = [A1, A2, A3, A4, A5, A6, A7, A8, A9],
    Row2 = [B1, B2, B3, B4, B5, B6, B7, B8, B9],
    Row3 = [C1, C2, C3, C4, C5, C6, C7, C8, C9],
    Row4 = [D1, D2, D3, D4, D5, D6, D7, D8, D9],
    Row5 = [E1, E2, E3, E4, E5, E6, E7, E8, E9],
    Row6 = [F1, F2, F3, F4, F5, F6, F7, F8, F9],
    Row7 = [G1, G2, G3, G4, G5, G6, G7, G8, G9],
    Row8 = [H1, H2, H3, H4, H5, H6, H7, H8, H9],
    Row9 = [I1, I2, I3, I4, I5, I6, I7, I8, I9],

    Col1 = [A1, B1, C1, D1, E1, F1, G1, H1, I1],
    Col2 = [A2, B2, C2, D2, E2, F2, G2, H2, I2],
    Col3 = [A3, B3, C3, D3, E3, F3, G3, H3, I3],
    Col4 = [A4, B4, C4, D4, E4, F4, G4, H4, I4],
    Col5 = [A5, B5, C5, D5, E5, F5, G5, H5, I5],
    Col6 = [A6, B6, C6, D6, E6, F6, G6, H6, I6],
    Col7 = [A7, B7, C7, D7, E7, F7, G7, H7, I7],
    Col8 = [A8, B8, C8, D8, E8, F8, G8, H8, I8],
    Col9 = [A9, B9, C9, D9, E9, F9, G9, H9, I9],

    Sqr1 = [A1, A2, A3, B1, B2, B3, C1, C2, C3],
    Sqr2 = [A4, A5, A6, B4, B5, B6, C4, C5, C6],
    Sqr3 = [A7, A8, A9, B7, B8, B9, C7, C8, C9],
    Sqr4 = [D1, D2, D3, E1, E2, E3, F1, F2, F3],
    Sqr5 = [D4, D5, D6, E4, E5, E6, F4, F5, F6],
    Sqr6 = [D7, D8, D9, E7, E8, E9, F7, F8, F9],
    Sqr7 = [G1, G2, G3, H1, H2, H3, I1, I2, I3],
    Sqr8 = [G4, G5, G6, H4, H5, H6, I4, I5, I6],
    Sqr9 = [G7, G8, G9, H7, H8, H9, I7, I8, I9],

    valid([Row1, Row2, Row3, Row4, Row5, Row6, Row7, Row8, Row9,
           Col1, Col2, Col3, Col4, Col5, Col6, Col7, Col8, Col9,
           Sqr1, Sqr2, Sqr3, Sqr4, Sqr5, Sqr6, Sqr7, Sqr8, Sqr9 ]).


printElms([], _, _) :- write('|'), write(' '), nl.
printElms([H|T],Count, Buffer) :-
    Sep is Count mod Buffer,
    (  Sep == 0
    -> write('|'), write(' ')
    ;  ! ),
    write(H), write(' '),
    NC is Count + 1,
    printElms(T,NC,Buffer).

print9(X) :-
    printElms(X,0,3).


printSudoku(X) :-
    printSudoku(X,0).
printSudoku([A,B,C,D,E,F,G,H,I|T],X) :-
    Sep is X mod 3,
    ( Sep == 0
    -> write('--------+-------+-------'), nl
    ; ! ),
    print9([A,B,C,D,E,F,G,H,I]),
    printSudoku(T, X + 1).

sudokuTest(X) :-
    sudoku([ 2, 1, 9, _, 4, 6, _, 3, _,
             _, _, 5, 1, _, _, _, _, _,
             _, 3, 4, _, _, _, 2, 6, _,
             _, 2, 6, _, _, 7, 5, _, 3,
             _, _, 1, _, 9, _, _, _, 7,
             4, 7, 3, _, 6, 5, _, _, 8,
             _, 6, _, 4, _, 2, 3, 1, _,
             3, 4, _, _, _, _, 7, 8, _,
             1, _, _, _, _, _, 4, 5, _ ],X),
    printSudoku(X),
    true.


   #+end_src

* Solving the Mary's Ideal question with CLP(B)
So after a short conversation with meng about logic programming (sCASP in particular), he suggested I look at CLP before looking at ASP then sCASP.

Since prolog has some level of CLP abilities with CLP(FD) and CLP(B), I thought I'd replicate it the Mary's Ideal question that Joey previously worked on with Alloy.

#+begin_src prolog :tangle MarysIdeal.pl
:- use_module(library(clpb)).

%% Original question: (From Summers 1968, puzzle 5).
%%
%% Mary's ideal man is tall, dark, and handsome. She knows four men: Alec, Bill, Carl, and Dave.
%% Only one of the four men has all of the characteristics Mary requires.
%% Only three of the men are tall, only two are dark, and only one is handsome.
%% Each of the four men has at least one of the required traits.
%% Alec and Bill have the same complexion.
%% Bill and Carl are the same height.
%% Carl and Dave are not both tall.
%% Which one of the four men satisfies all of Mary's requirements?

%% Define the variables t, d & h as follows:
%%   t -> tall ; short
%%   d -> dark ; fair
%%   h -> handsome; not-handsome

%% Each variable is in a universe of its own?

#+end_src
